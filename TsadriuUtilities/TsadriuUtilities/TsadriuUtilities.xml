<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TsadriuUtilities</name>
    </assembly>
    <members>
        <member name="T:TsadriuUtilities.MultiHelper">
            <summary>
            A class that helps on dealing with multiple things.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.MultiHelper.ClampValue``1(``0,``0,``0)">
            <summary>
            Clamps a value based on its' parameters. Returns <paramref name="maxValue"/> if <paramref name="currentValue"/> is higher than it and returns <paramref name="minValue"/> if it is lower than it.
            Supported types:
            <see cref="T:System.DateTime"/>,
            <see cref="T:System.Int64"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Byte"/>,
            <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.
            </summary>
            <param name="currentValue">Current value.</param>
            <param name="minValue">Minimum value that the <paramref name="currentValue"/> cannot succeed.</param>
            <param name="maxValue">Maximum value that the <paramref name="currentValue"/> cannot succeed.</param>
            <returns>Returns the clamped result of the operation.</returns>
            <exception cref="T:System.NotImplementedException">Throws <see cref="T:System.NotImplementedException"/> if trying to call this method with an unsupported <see cref="T:System.Type"/>.</exception>
        </member>
        <member name="T:TsadriuUtilities.StrHelper">
            <summary>
            A class that helps on dealing with strings.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.StrHelper.GetTagValue(System.String,System.String,System.String)">
            <summary>
            Searches through an input text returning the value between the start tag and end tag.
            </summary>
            <param name="text">Text to search though.</param>
            <param name="startTag">The start tag.</param>
            <param name="endTag">The end tag.</param>
            <returns>Returns string.empty if nothing is found.</returns>
        </member>
        <member name="M:TsadriuUtilities.StrHelper.IsEmpty(System.String)">
            <summary>
            Checks if the <paramref name="value"/> is null, <see cref="F:System.String.Empty"/> or a white space ("").
            </summary>
            <param name="value">The value to check.</param>
            <returns>Returns true if the <paramref name="value"/> is empty. Returns false if not.</returns>
        </member>
        <member name="M:TsadriuUtilities.StrHelper.IsNotEmpty(System.String)">
            <summary>
            Checks if <paramref name="value"/> contains any kind of character.
            </summary>
            <param name="value">The value to check.</param>
            <returns>Returns true if the <paramref name="value"/> is not empty. Returns false if not.</returns>
        </member>
        <member name="M:TsadriuUtilities.StrHelper.LetterUpperCase(System.String,System.Int32)">
            <summary>
            Changes a lower-case letter to be upper-case. If <paramref name="index"/> is not passed, it will change the first letter of <paramref name="value"/>.
            </summary>
            <param name="value">The value to change.</param>
            <param name="index">The index of the letter to be changed. If <paramref name="index"/> is not passed, it will change the first letter of <paramref name="value"/>.</param>
            <returns>Returns the new string with the changed value. Returns the same <paramref name="value"/> if it was empty or <paramref name="index"/> was invalid.</returns>
        </member>
        <member name="M:TsadriuUtilities.StrHelper.LetterLowerCase(System.String,System.Int32)">
            <summary>
            Changes a upper-case letter to be lower-case. If <paramref name="index"/> is not passed, it will change the first letter of <paramref name="value"/>.
            </summary>
            <param name="value">The value to change.</param>
            <param name="index">The index of the letter to be changed. If <paramref name="index"/> is not passed, it will change the first letter of <paramref name="value"/>.</param>
            <returns>Returns the new string with the changed value. Returns the same <paramref name="value"/> if it was empty or <paramref name="index"/> was invalid.</returns>
        </member>
    </members>
</doc>
