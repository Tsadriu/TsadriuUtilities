<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TsadriuUtilities</name>
    </assembly>
    <members>
        <member name="T:TsadriuUtilities.ArrayHelper">
            <summary>
            A class that helps on dealing with <see cref="T:System.Array"/>.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.ArrayHelper.ToString``1(``0[],System.String)">
            <summary>
            Converts an <see cref="T:System.Array"/> into a single line <see cref="T:System.String"/>. If <paramref name="separator"/> is not passed, it will separate by a space. Examples: ArrayToString(new int[] { 1, 3, 5 }) -> "1 3 5", ArrayToString(new string[] { "5", "2" }, "|") -> "5|2".
            Supported types:
            <see cref="T:System.DateTime"/>,
            <see cref="T:System.Int64"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Byte"/>,
            <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.
            </summary>
            <param name="array"><see cref="T:System.Array"/> of objects.</param>
            <param name="separator"><see cref="T:System.String"/> separator. If nothing is passed, it will separate by a space.</param>
            <returns><see cref="T:System.Array"/> converted into a single <see cref="T:System.String"/> line.</returns>
        </member>
        <member name="M:TsadriuUtilities.ArrayHelper.GenerateRandom``1(``0[],System.Int32,System.Int32)">
            <summary>
            Fills up the array with random numbers between <paramref name="min"/> (default: 0, inclusive) and <paramref name="max"/> (default: 100, inclusive).
            Supported types: <see cref="T:System.Int32"/>, <see cref="T:System.Int16"/> and <see cref="T:System.Byte"/>.
            </summary>
            <param name="array">Current array.</param>
            <param name="min">The minimum number that can be generated.</param>
            <param name="max">The maximum number that can be generated.</param>
            <returns>An array which all indexes have been assigned a random number.</returns>
        </member>
        <member name="T:TsadriuUtilities.CharHelper">
            <summary>
            A class that helps on dealing with <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.CharHelper.ToChar(System.String,System.Int32)">
            <summary>
            Converts a <see cref="T:System.String"/> into a <see cref="T:System.Char"/>. If the length of <paramref name="value"/> is higher than 1, it will return the first character of <paramref name="value"/> or, if <paramref name="index"/> is passed, the character of the desired index.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to get the value from.</param>
            <param name="index">The <paramref name="index"/> of the letter to be return. If <paramref name="index"/> is not passed, it will return the first letter of <paramref name="value"/>.</param>
            <returns>Return the first character of <paramref name="value"/> or, if <paramref name="index"/> is passed, the character of the desired index.</returns>
        </member>
        <member name="T:TsadriuUtilities.DateTimeHelper">
            <summary>
            A class that helps on dealing with <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.DateTimeHelper.ToDateTime(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Tries to convert a date from a <see cref="T:System.String"/> to a type of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateAsString">The date as a <see cref="T:System.String"/>. Examples: "23/03/2012", "11-02-2001", "06.12.2019".</param>
            <param name="dateFormat">The date format. Examples: "dd/MM/yyyy", "MM/dd/yyyy".</param>
            <param name="dateCulture">The <see cref="T:System.Globalization.CultureInfo"/> of the date (Is it an american date? Is it an italian date?).</param>
            <returns>If the parsing was successful, returns <see cref="T:System.DateTime"/>. If the parsing fails, returns <see cref="F:System.DateTime.MinValue"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.DateTimeHelper.ToDateTime(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Tries to convert a date from a <see cref="T:System.String"/> to a type of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateAsString">The date as a <see cref="T:System.String"/>. Examples: "23/03/2012", "11-02-2001", "06.12.2019".</param>
            <param name="dateFormats">The date format. The more formats are passed, the more parses the program will try to do.</param>
            <param name="dateCulture">The <see cref="T:System.Globalization.CultureInfo"/> of the date (Is it an american date? Is it an italian date?).</param>
            <returns>If the parsing was successful, returns <see cref="T:System.DateTime"/>. If the parsing fails, returns <see cref="F:System.DateTime.MinValue"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.DateTimeHelper.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Parses the date to return with the last day of the month.
            </summary>
            <param name="date">Date to be checked on.</param>
            <returns>Date with the last day of the month.</returns>
        </member>
        <member name="M:TsadriuUtilities.DateTimeHelper.SetDay(System.DateTime,System.Int32)">
            <summary>
            Sets the <paramref name="day"/> in the <paramref name="date"/>.
            </summary>
            <param name="date">Current date.</param>
            <param name="day">Day to set. In case <paramref name="day"/> is higher than the month's max days, it will be clamped.</param>
            <returns>Date with the specified <paramref name="day"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.DateTimeHelper.SetMonth(System.DateTime,System.Int32)">
            <summary>
            Sets the <paramref name="month"/> in the <paramref name="date"/>.
            </summary>
            <param name="date">Current date.</param>
            <param name="month">Month to set. In case <paramref name="month"/> is higher than the year's max months, it will be clamped.</param>
            <returns>Date with the specified <paramref name="month"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.DateTimeHelper.SetYear(System.DateTime,System.Int32)">
            <summary>
            Sets the <paramref name="year"/> in the <paramref name="date"/>.
            </summary>
            <param name="date">Current date.</param>
            <param name="year">Year to set.</param>
            <returns>Date with the specified <paramref name="year"/>.</returns>
        </member>
        <member name="T:TsadriuUtilities.DirectoryHelper">
            <summary>
            A class that helps on dealing with <see cref="T:System.IO.Directory"/>.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.DirectoryHelper.Exist(System.String,System.Boolean)">
            <summary>
            Checks if a <paramref name="path"/> exists. If <paramref name="createFolder"/> is true, it will create <paramref name="path"/> if the <paramref name="path"/> doesn't exist.
            </summary>
            <param name="path">Path.</param>
            <param name="createFolder">Create the folder in case the <paramref name="path"/> doesn't exist.</param>
            <returns>True if the path exists. Otherwise false.</returns>
        </member>
        <member name="M:TsadriuUtilities.DirectoryHelper.NotExist(System.String,System.Boolean)">
            <summary>
            Checks if a <paramref name="path"/> does not exist. If <paramref name="createFolder"/> is true, it will create <paramref name="path"/> if the <paramref name="path"/> doesn't exist.
            </summary>
            <param name="path">Path.</param>
            <param name="createFolder">Create the folder in case the <paramref name="path"/> doesn't exist.</param>
            <returns>True if the path does not exist. Otherwise false.</returns>
        </member>
        <member name="T:TsadriuUtilities.FileHelper">
            <summary>
            A class that helps on dealing with <see cref="T:System.IO.File"/>.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.FileHelper.GetFileExtention(System.String)">
            <summary>
            Returns the extention of <paramref name="fileName"/>. If <paramref name="fileName"/> has multiple extentions (Example: filename.txt.zip), it will return the last extention.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>Returns the extention of <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.FileHelper.Exist(System.String,System.Boolean)">
            <summary>
            Checks if a <paramref name="fullFileName"/> exists. If <paramref name="createFile"/> is true, it will create <paramref name="fullFileName"/> if the <paramref name="fullFileName"/> doesn't exist (Keep in mind that the path of <paramref name="fullFileName"/> must exist for <paramref name="createFile"/> to work).
            </summary>
            <param name="fullFileName">File name with the path included.</param>
            <param name="createFile">Create the file in case the <paramref name="fullFileName"/> doesn't exist. The path must exist beforehand for this to work.</param>
            <returns>True if the file exists. Otherwise false.</returns>
        </member>
        <member name="M:TsadriuUtilities.FileHelper.NotExist(System.String,System.Boolean)">
            <summary>
            Checks if a <paramref name="fullFileName"/> does not exist. If <paramref name="createFile"/> is true, it will create <paramref name="fullFileName"/> if the <paramref name="fullFileName"/> doesn't exist (Keep in mind that the path of <paramref name="fullFileName"/> must exist for <paramref name="createFile"/> to work).
            </summary>
            <param name="fullFileName">File name with the path included.</param>
            <param name="createFile">Create the file in case the <paramref name="fullFileName"/> doesn't exist. The path must exist beforehand for this to work.</param>
            <returns>True if the file exists. Otherwise false.</returns>
        </member>
        <member name="T:TsadriuUtilities.ListHelper">
            <summary>
            A class that helps on dealing with <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.ListHelper.AddRange``1(System.Collections.Generic.List{``0},``0[],System.Int32,System.Int32)">
            <summary>
            Adds the <paramref name="array"/> into <paramref name="currentList"/>.
            If <paramref name="startIndex"/> is specified, it will add only from <paramref name="startIndex"/> (included) until the end of the <see cref="T:System.Array"/> or until it reaches <paramref name="endIndex"/> (included) if it is specified.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <param name="currentList">List where <paramref name="array"/> will be added into.</param>
            <param name="array">Array of values.</param>
            <param name="startIndex">From which point of the <paramref name="array"/>'s index should added.</param>
            <param name="endIndex">From which point of the <paramref name="array"/>'s index should stop.</param>
        </member>
        <member name="M:TsadriuUtilities.ListHelper.AddRange``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Adds the <paramref name="listToAdd"/> into <paramref name="currentList"/>. If <paramref name="index"/> is specified, it will add only from <paramref name="index"/> (included) until the end of the <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <param name="currentList">List where <paramref name="listToAdd"/> will be added into.</param>
            <param name="listToAdd">Array of values.</param>
            <param name="index">From which point of the <paramref name="listToAdd"/>'s index should added.</param>
        </member>
        <member name="M:TsadriuUtilities.ListHelper.ToList``1(``0[])">
            <summary>
            Transforms an <see cref="T:System.Array"/> to a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <param name="array"><see cref="T:System.Array"/> that you want to be converted to a <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the <paramref name="array"/>'s values.</returns>
        </member>
        <member name="M:TsadriuUtilities.ListHelper.OrderByAscending``1(System.Collections.Generic.List{``0})">
            <summary>
            Orders the <see cref="T:System.Collections.Generic.List`1"/> in ascending order.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <param name="list"><see cref="T:System.Collections.Generic.List`1"/> to be ordered.</param>
        </member>
        <member name="M:TsadriuUtilities.ListHelper.OrderByDescending``1(System.Collections.Generic.List{``0})">
            <summary>
            Orders the <see cref="T:System.Collections.Generic.List`1"/> in descending order.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <param name="list"><see cref="T:System.Collections.Generic.List`1"/> to be ordered.</param>
        </member>
        <member name="M:TsadriuUtilities.ListHelper.ToString``1(System.Collections.Generic.List{``0},System.String,System.Int32,System.Int32)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.List`1"/> into a single line <see cref="T:System.String"/>. If <paramref name="separator"/> is not passed, it will separate by a space. Examples: ListToString(new int[] { 1, 3, 5 }) -> "1 3 5", ListToString(new string[] { "5", "2" }, "|") -> "5|2".
            Supported types:
            <see cref="T:System.DateTime"/>,
            <see cref="T:System.Int64"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Byte"/>,
            <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.
            </summary>
            <param name="list"><see cref="T:System.Collections.Generic.List`1"/> of objects.</param>
            <param name="separator"><see cref="T:System.String"/> separator. If nothing is passed, it will separate by a space.</param>
            <param name="startIndex">From which point of the <paramref name="list"/>'s index should added.</param>
            <param name="count">How many elements in the <paramref name="list"/> should be taken considering the <paramref name="startIndex"/>'s point.</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> converted into a single <see cref="T:System.String"/> line.</returns>
        </member>
        <member name="M:TsadriuUtilities.ListHelper.HasAny``1(System.Collections.Generic.List{``0})">
            <summary>
            Iterates through <paramref name="list"/> checking that it has at least 1 non null element.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <param name="list"><see cref="T:System.Collections.Generic.List`1"/> of objects.</param>
            <returns>Returns true if <paramref name="list"/> has at least 1 non null element. Otherwise returns false.</returns>
        </member>
        <member name="T:TsadriuUtilities.MultiHelper">
            <summary>
            A class that helps on dealing with multiple things.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.MultiHelper.ClampValue``1(``0,``0,``0)">
            <summary>
            Clamps a value based on its' parameters. Returns <paramref name="maxValue"/> if <paramref name="currentValue"/> is higher than it and returns <paramref name="minValue"/> if it is lower than it.
            Supported types:
            <see cref="T:System.DateTime"/>,
            <see cref="T:System.Int64"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Byte"/>,
            <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.
            </summary>
            <param name="currentValue">Current value.</param>
            <param name="minValue">Minimum value that the <paramref name="currentValue"/> cannot succeed.</param>
            <param name="maxValue">Maximum value that the <paramref name="currentValue"/> cannot succeed.</param>
            <returns>Returns the clamped result of the operation.</returns>
            <exception cref="T:System.NotImplementedException">Throws <see cref="T:System.NotImplementedException"/> if trying to call this method with an unsupported <see cref="T:System.Type"/>.</exception>
        </member>
        <member name="T:TsadriuUtilities.NumberHelper">
            <summary>
            A class that helps on dealing with numbers.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.NumberHelper.ToDecimal(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> into a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">Number as a <see cref="T:System.String"/> ('46e-9', '5.6', etc...).</param>
            <returns>Returns the parsed <paramref name="value"/> as a <see cref="T:System.Decimal"/>. If the conversion fails, returns <see cref="F:System.Decimal.Zero"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.NumberHelper.ToDouble(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> into a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">Number as a <see cref="T:System.String"/> ('46e-9', '5.6', etc...).</param>
            <returns>Returns the parsed <paramref name="value"/> as a <see cref="T:System.Double"/>. If the conversion fails, returns 0.0d.</returns>
        </member>
        <member name="M:TsadriuUtilities.NumberHelper.Max``1(``0[])">
            <summary>
            Returns the highest number present in the <paramref name="sequence"/>.
            Supported types:
            <see cref="T:System.Int64"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Byte"/>,
            <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="sequence">Sequence of numbers.</param>
            <returns>The highest number present in <paramref name="sequence"/>. If it's not found (or sequence is null or empty), returns 0.</returns>
        </member>
        <member name="M:TsadriuUtilities.NumberHelper.Min``1(``0[])">
            <summary>
            Returns the lowest number present in the <paramref name="sequence"/>.
            Supported types:
            <see cref="T:System.Int64"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Byte"/>,
            <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="sequence">Sequence of numbers.</param>
            <returns>The lowest number present in <paramref name="sequence"/>. If it's not found (or sequence is null or empty), returns 0.</returns>
        </member>
        <member name="M:TsadriuUtilities.NumberHelper.Between``1(``0,``0,``0,System.Boolean)">
            <summary>
            Check if <paramref name="value"/> is between <paramref name="min"/> and <paramref name="max"/>. Setting <paramref name="included"/> to true will also include <paramref name="min"/> and <paramref name="max"/> in the verification.
            </summary>
            <typeparam name="T">Supported types: <see cref="T:System.Int64"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Byte"/>,
            <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.</typeparam>
            <param name="value">The value to be checked on.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <param name="included">Set to true to include <paramref name="min"/> and <paramref name="max"/> in the verification.</param>
            <returns>True if <paramref name="value"/> is between <paramref name="min"/> and <paramref name="max"/>. Otherwise returns false.</returns>
        </member>
        <member name="T:TsadriuUtilities.TTable">
            <summary>
            A class that helps store data on the go.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.TTable.#ctor">
            <summary>
            Creates a new instace of <see cref="T:TsadriuUtilities.TTable"/>.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.TTable.AddColumn(System.String[])">
            <summary>
            Adds a new <see cref="T:TsadriuUtilities.TTableColumn"/> in the <see cref="T:TsadriuUtilities.TTable"/>.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:TsadriuUtilities.TTable.AddColumn(TsadriuUtilities.TTableColumn[])">
            <summary>
            Adds a new <see cref="T:TsadriuUtilities.TTableColumn"/> in the <see cref="T:TsadriuUtilities.TTable"/>.
            </summary>
            <param name="tableColumn">Instance of <see cref="T:TsadriuUtilities.TTableColumn"/>.</param>
        </member>
        <member name="M:TsadriuUtilities.TTable.AddData(System.String,System.Object[])">
            <summary>
            Adds <paramref name="values"/> into the <see cref="T:TsadriuUtilities.TTableColumn"/> as <see cref="T:System.Object"/>.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="values">Values to store in the <see cref="T:TsadriuUtilities.TTableColumn"/>.</param>
        </member>
        <member name="M:TsadriuUtilities.TTable.AddData(TsadriuUtilities.TTableColumn,System.Object[])">
            <summary>
            Adds <paramref name="values"/> into the <see cref="T:TsadriuUtilities.TTableColumn"/> as <see cref="T:System.Object"/>.
            </summary>
            <param name="tableColumn"><see cref="T:TsadriuUtilities.TTableColumn"/> instance.</param>
            <param name="values">Values to store in the <see cref="T:TsadriuUtilities.TTableColumn"/>.</param>
        </member>
        <member name="M:TsadriuUtilities.TTable.ExistsData(System.String,System.Object)">
            <summary>
            Checks through the <see cref="T:TsadriuUtilities.TTableColumn"/> for <paramref name="value"/>. Returns true if <paramref name="value"/> is found, otherwise false.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="value">Value to be checked.</param>
            <returns>True if the <paramref name="value"/> is found, otherwise false.</returns>
        </member>
        <member name="M:TsadriuUtilities.TTable.ExistsData(TsadriuUtilities.TTableColumn,System.Object)">
            <summary>
            Checks through the <see cref="T:TsadriuUtilities.TTableColumn"/> for <paramref name="value"/>. Returns true if <paramref name="value"/> is found, otherwise false.
            </summary>
            <param name="tableColumn">Instance of <see cref="T:TsadriuUtilities.TTableColumn"/>.</param>
            <param name="value">Value to be checked.</param>
            <returns>True if the <paramref name="value"/> is found, otherwise false.</returns>
        </member>
        <member name="M:TsadriuUtilities.TTable.GetData(System.String)">
            <summary>
            If the <paramref name="columnName"/> exists, returns all the data present in the <see cref="T:TsadriuUtilities.TTableColumn"/>.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>If the <see cref="T:TsadriuUtilities.TTableColumn"/> exists, returns a List of <see cref="T:System.Object"/> containing the data. Otherwise returns an empty list. </returns>
        </member>
        <member name="M:TsadriuUtilities.TTable.RemoveData(System.String,System.Object[])">
            <summary>
            Removes all instances of <paramref name="valuesToRemove"/>.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="valuesToRemove">Values to remove from the <see cref="T:TsadriuUtilities.TTableColumn"/>.</param>
        </member>
        <member name="M:TsadriuUtilities.TTable.RemoveData(TsadriuUtilities.TTableColumn,System.Object[])">
            <summary>
            Removes all instances of <paramref name="valuesToRemove"/>.
            </summary>
            <param name="tableColumn"><see cref="T:TsadriuUtilities.TTableColumn"/> instance.</param>
            <param name="valuesToRemove">Values to remove from the <see cref="T:TsadriuUtilities.TTableColumn"/>.</param>
        </member>
        <member name="M:TsadriuUtilities.TTable.TableToCsv(System.Boolean,System.String)">
            <summary>
            Transform the <see cref="T:TsadriuUtilities.TTable"/> into a parseable .csv file.
            </summary>
            <param name="addHeader">If true, the generated .csv file will have a header. If false, the generated .csv file will have no header. <see cref="P:TsadriuUtilities.TTableColumn.ColumnName"/> will be used as a header.</param>
            <param name="separator">Separator of the csv. Default uses ;</param>
            <returns>List of <see cref="T:TsadriuUtilities.TTable"/> that has been parsed to a List of <see cref="T:System.String"/> as a csv.</returns>
        </member>
        <member name="M:TsadriuUtilities.TTable.CsvToTable(System.String,System.String)">
            <summary>
            Transforms a .csv file into a <see cref="T:TsadriuUtilities.TTable"/>.
            </summary>
            <param name="fullFileName">File name of the file, including its' path.</param>
            <param name="separator">Separator of the csv. Default uses ;</param>
            <returns>Instance of <see cref="T:TsadriuUtilities.TTable"/> with the data of <paramref name="fullFileName"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.TTable.GetHighestColumnDataCount">
            <summary>
            Checks through the List of <see cref="P:TsadriuUtilities.TTable.ColumnList"/> and returns the <see cref="P:TsadriuUtilities.TTableColumn.ColumnData"/> with the highest Count.
            </summary>
            <returns>Returns the <see cref="P:TsadriuUtilities.TTableColumn.ColumnData"/> with the highest Count.</returns>
        </member>
        <member name="M:TsadriuUtilities.TTable.GetHeadersAsString(System.Collections.Generic.List{TsadriuUtilities.TTableColumn},System.String)">
            <summary>
            Returns the headers of the <see cref="T:TsadriuUtilities.TTable"/> as a <see cref="T:System.String"/>.
            </summary>
            <param name="columns">The list of <see cref="T:TsadriuUtilities.TTableColumn"/> (usually found in object <see cref="P:TsadriuUtilities.TTable.ColumnList"/>).</param>
            <param name="separator">The desired separator. Default uses ;</param>
            <returns>Headers of the columns in a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.TTable.StartUp">
            <summary>
            Starts up the List of <see cref="T:TsadriuUtilities.TTableColumn"/>.
            </summary>
        </member>
        <member name="T:TsadriuUtilities.TTableColumn">
            <summary>
            A class that helps store data on the go.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.TTableColumn.#ctor(System.String)">
            <summary>
            Creates a new instace of <see cref="T:TsadriuUtilities.TTableColumn"/>.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="P:TsadriuUtilities.TTableColumn.ColumnName">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="P:TsadriuUtilities.TTableColumn.ColumnData">
            <summary>
            The data stored in the column.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.TTableColumn.AddData(System.Object[])">
            <summary>
            Adds <paramref name="values"/> into the <see cref="T:TsadriuUtilities.TTableColumn"/> as <see cref="T:System.Object"/>.
            </summary>
            <param name="values">Values to store in the <see cref="T:TsadriuUtilities.TTableColumn"/>.</param>
        </member>
        <member name="M:TsadriuUtilities.TTableColumn.ExistsData(System.Object)">
            <summary>
            Checks through the <see cref="T:TsadriuUtilities.TTableColumn"/> for <paramref name="value"/>. Returns true if <paramref name="value"/> is found, otherwise false.
            </summary>
            <param name="value">Value to be checked.</param>
            <returns>True if the <paramref name="value"/> is found, otherwise false.</returns>
        </member>
        <member name="M:TsadriuUtilities.TTableColumn.RemoveData(System.Object[])">
            <summary>
            Removes all instances of <paramref name="values"/>.
            </summary>
            <param name="values">Values to remove from the <see cref="T:TsadriuUtilities.TTableColumn"/>.</param>
        </member>
        <member name="T:TsadriuUtilities.Objects.TXml">
            <summary>
            A class that helps on storing xml data.
            </summary>
        </member>
        <member name="T:TsadriuUtilities.Objects.TXmlObject">
            <summary>
            A class that helps on storing xml data.
            </summary>
        </member>
        <member name="T:TsadriuUtilities.Objects.TXmlTag">
            <summary>
            A class that helps on storing xml data.
            </summary>
        </member>
        <member name="T:TsadriuUtilities.StringHelper">
            <summary>
            A class that helps on dealing with <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.GetTagValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Searches through the <paramref name="text"/>, returning the first instance found between <paramref name="startTag"/> and <paramref name="endTag"/>. Use <paramref name="tagsIncluded"/> if you want to include them.
            </summary>
            <param name="text">Text to search though.</param>
            <param name="startTag">The start tag.</param>
            <param name="endTag">The end tag.</param>
            <param name="tagsIncluded">If enabled, it will return a string with the <paramref name="startTag"/> and <paramref name="endTag"/> included.</param>
            <returns>Returns string.Empty if nothing is found.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.GetTagValues(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Searches through the <paramref name="text"/>, returning all instances found between the <paramref name="startTag"/> and <paramref name="endTag"/>. Use <paramref name="tagsIncluded"/> if you want to include them.
            </summary>
            <param name="text">Text to search though.</param>
            <param name="startTag">The start tag.</param>
            <param name="endTag">The end tag.</param>
            <param name="tagsIncluded">If enabled, it will return a string with the <paramref name="startTag"/> and <paramref name="endTag"/> included.</param>
            <returns>Returns an empty List of <see cref="T:System.String"/> if nothing is found or parameters <paramref name="text"/>, <paramref name="startTag"/> or <paramref name="endTag"/> are empty.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.IsEmpty(System.String)">
            <summary>
            Checks if the <paramref name="value"/> is null, <see cref="F:System.String.Empty"/> or a white space ("", \n, \r, ...).
            </summary>
            <param name="value">The value to check.</param>
            <returns>Returns true if the <paramref name="value"/> is empty. Returns false if it's not empty.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.IsNotEmpty(System.String)">
            <summary>
            Checks if <paramref name="value"/> contains any kind of character.
            </summary>
            <param name="value">The value to check.</param>
            <returns>Returns true if the <paramref name="value"/> is not empty. Returns false if it contains any kind of character.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.AreEmpty(System.String[])">
            <summary>
            Checks if all instances of <paramref name="values"/> are null, <see cref="F:System.String.Empty"/> or a white space ("", \n, \r, ...).
            </summary>
            <param name="values">The values to check.</param>
            <returns>Returns true if even one of the instances of <paramref name="values"/> is empty. Returns false if all of them are not empty.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.AreNotEmpty(System.String[])">
            <summary>
            Checks if all instances of <paramref name="values"/> are not empty.
            </summary>
            <param name="values">The values to check.</param>
            <returns>Returns true if even one of the instances of <paramref name="values"/> is not empty. Returns false if all of them are empty.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.LetterUpperCase(System.String,System.Int32)">
            <summary>
            Changes a lower-case letter to be upper-case. If <paramref name="index"/> is not passed, it will change the first letter of <paramref name="value"/>.
            </summary>
            <param name="value">The value to change.</param>
            <param name="index">The index of the letter to be changed. If <paramref name="index"/> is not passed, it will change the first letter of <paramref name="value"/>.</param>
            <returns>Returns the new string with the changed value. Returns the same <paramref name="value"/> if it was empty or <paramref name="index"/> was invalid.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.LetterLowerCase(System.String,System.Int32)">
            <summary>
            Changes a upper-case letter to be lower-case. If <paramref name="index"/> is not passed, it will change the first letter of <paramref name="value"/>.
            </summary>
            <param name="value">The value to change.</param>
            <param name="index">The index of the letter to be changed. If <paramref name="index"/> is not passed, it will change the first letter of <paramref name="value"/>.</param>
            <returns>Returns the new string with the changed value. Returns the same <paramref name="value"/> if it was empty or <paramref name="index"/> was invalid.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.Remove(System.String,System.String[])">
            <summary>
            Returns a <see cref="T:System.String"/> where all occasions of <paramref name="valuesToRemove"/> have been removed from the <paramref name="value"/>.
            </summary>
            <param name="value">The value to change.</param>
            <param name="valuesToRemove">The values to remove from <paramref name="value"/>.</param>
            <returns>Returns a <see cref="T:System.String"/> where all occasions of <paramref name="valuesToRemove"/> have been removed from the <paramref name="value"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.CharCount(System.String,System.String)">
            <summary>
            Returns the count of <paramref name="valueToCount"/> present in <paramref name="value"/>.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="valueToCount">The value to be counted in <paramref name="value"/>.</param>
            <returns>Returns the count of <paramref name="valueToCount"/> present in <paramref name="value"/>.</returns>
        </member>
        <member name="M:TsadriuUtilities.StringHelper.RemoveTags(System.String,System.String[])">
            <summary>
            Returns a string where all instances of <paramref name="tags"/> are removed.
            </summary>
            <param name="value">The value where <paramref name="tags"/> will be removed.</param>
            <param name="tags">The tags to remove from <paramref name="value"/>.</param>
            Returns a <see cref="T:System.String"/> where all instances of <paramref name="tags"/> are removed.
        </member>
        <member name="M:TsadriuUtilities.StringHelper.RemoveTags(System.String,System.String)">
            <summary>
            Returns a string where all instances of <paramref name="tag"/> are removed.
            </summary>
            <param name="value">The value where <paramref name="tag"/> will be removed.</param>
            <param name="tag">The tag to remove from <paramref name="value"/>.</param>
            Returns a <see cref="T:System.String"/> where all instances of <paramref name="tag"/> are removed.
        </member>
    </members>
</doc>
